import React, { useState } from 'react';

const ShoppingListApp = () => {
  const [activeCategory, setActiveCategory] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [budget, setBudget] = useState('');
  const [showPrintView, setShowPrintView] = useState(false);
  
  const categories = [
    { id: 'all', name: 'All Supplies' },
    { id: 'cleaning', name: 'Cleaning & Irrigation' },
    { id: 'covering', name: 'Dressings & Coverings' },
    { id: 'basic', name: 'Basic Supplies' },
    { id: 'specialty', name: 'Specialty Wound Care' },
    { id: 'alternative', name: 'Alternative Options' }
  ];
  
  const supplies = [
    // Cleaning & Irrigation
    {
      id: 1,
      name: 'Saline Wound Wash',
      category: 'cleaning',
      priority: 'High',
      commonStores: ['Pharmacy (CVS, Walgreens)', 'Walmart', 'Target'],
      estimatedPrice: '$4-8',
      description: 'For cleaning wounds without irritation',
      alternatives: 'Homemade saline solution (1 tsp salt per quart of boiled, cooled water)',
      notes: 'Look in first aid section, usually in a spray can'
    },
    {
      id: 2,
      name: 'Bottled Water',
      category: 'cleaning',
      priority: 'High',
      commonStores: ['Any grocery store', 'Convenience stores', 'Dollar stores'],
      estimatedPrice: '$1-2',
      description: 'For wound cleaning when nothing else is available',
      alternatives: 'Any clean water source',
      notes: 'Get smallest size for portability'
    },
    {
      id: 3,
      name: 'Hydrogen Peroxide 3%',
      category: 'cleaning',
      priority: 'Medium',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores'],
      estimatedPrice: '$1-3',
      description: 'For cleaning around wounds (not directly on open wounds)',
      alternatives: 'Diluted soap and water',
      notes: 'Should not be used repeatedly on open wounds as it can damage healing tissue'
    },
    {
      id: 4,
      name: 'Liquid Antibacterial Soap',
      category: 'cleaning',
      priority: 'Medium',
      commonStores: ['Any grocery store', 'Dollar stores', 'Pharmacy'],
      estimatedPrice: '$1-4',
      description: 'For handwashing and cleaning skin around wounds',
      alternatives: 'Any mild soap',
      notes: 'Unscented preferred'
    },
    
    // Dressings & Coverings
    {
      id: 5,
      name: 'Non-stick Pads (Telfa)',
      category: 'covering',
      priority: 'High',
      commonStores: ['Pharmacy', 'Walmart', 'Target'],
      estimatedPrice: '$4-7',
      description: 'Primary dressing that won\'t stick to wounds',
      alternatives: 'Wax paper with petroleum jelly',
      notes: 'Available in different sizes'
    },
    {
      id: 6,
      name: 'Gauze Pads',
      category: 'covering',
      priority: 'High',
      commonStores: ['Pharmacy', 'Walmart', 'Target', 'Dollar stores'],
      estimatedPrice: '$2-5',
      description: 'For covering wounds and absorbing drainage',
      alternatives: 'Clean cotton t-shirt material, menstrual pads (unscented)',
      notes: 'Available in different sizes - 2x2", 3x3", 4x4"'
    },
    {
      id: 7,
      name: 'Adhesive Bandages (Band-aids)',
      category: 'covering',
      priority: 'High',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores'],
      estimatedPrice: '$2-5',
      description: 'For covering small wounds',
      alternatives: 'Paper tape with gauze',
      notes: 'Get variety of sizes'
    },
    {
      id: 8,
      name: 'Roll Gauze',
      category: 'covering',
      priority: 'Medium',
      commonStores: ['Pharmacy', 'Walmart', 'Target'],
      estimatedPrice: '$2-4',
      description: 'For wrapping wounds and securing dressings',
      alternatives: 'Clean strips of cotton fabric',
      notes: '2" or 3" width most versatile'
    },
    {
      id: 9,
      name: 'Self-adherent Wrap (Coban)',
      category: 'covering',
      priority: 'Medium',
      commonStores: ['Pharmacy', 'Walmart', 'Target'],
      estimatedPrice: '$5-8',
      description: 'Stretchy wrap that sticks to itself but not skin',
      alternatives: 'Tube socks with toe cut off',
      notes: 'Available in different widths - 2" most useful'
    },
    
    // Basic Supplies
    {
      id: 10,
      name: 'Medical Tape (Paper or Cloth)',
      category: 'basic',
      priority: 'High',
      commonStores: ['Pharmacy', 'Walmart', 'Target', 'Dollar stores'],
      estimatedPrice: '$2-4',
      description: 'For securing dressings',
      alternatives: 'First aid tape, athletic tape, paper masking tape',
      notes: 'Paper tape is gentler but less secure than cloth tape'
    },
    {
      id: 11,
      name: 'Disposable Gloves',
      category: 'basic',
      priority: 'Medium',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores', 'Hardware stores'],
      estimatedPrice: '$3-8',
      description: 'For clean wound care',
      alternatives: 'Thorough handwashing',
      notes: 'Vinyl or nitrile better for those with latex allergies'
    },
    {
      id: 12,
      name: 'Scissors',
      category: 'basic',
      priority: 'Medium',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores'],
      estimatedPrice: '$1-5',
      description: 'For cutting gauze, tape, and dressings',
      alternatives: 'Any clean scissors',
      notes: 'Clean with alcohol before use'
    },
    {
      id: 13,
      name: 'Tweezers',
      category: 'basic',
      priority: 'Low',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores'],
      estimatedPrice: '$1-4',
      description: 'For handling dressings and removing foreign material',
      alternatives: 'Any clean tweezers',
      notes: 'Clean with alcohol before use'
    },
    {
      id: 14,
      name: 'Hand Sanitizer',
      category: 'basic',
      priority: 'High',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores'],
      estimatedPrice: '$1-3',
      description: 'For hand cleaning when soap and water not available',
      alternatives: 'Alcohol wipes',
      notes: 'Portable sizes available'
    },
    
    // Specialty Wound Care
    {
      id: 15,
      name: 'Petroleum Jelly (Vaseline)',
      category: 'specialty',
      priority: 'High',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores'],
      estimatedPrice: '$2-4',
      description: 'For dry wounds, skin protection, and improvised non-stick layers',
      alternatives: 'A&D ointment, cooking oils in emergency',
      notes: 'Available in tubes or small containers'
    },
    {
      id: 16,
      name: 'Triple Antibiotic Ointment',
      category: 'specialty',
      priority: 'Medium',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores'],
      estimatedPrice: '$3-6',
      description: 'For preventing infection in minor wounds',
      alternatives: 'Petroleum jelly, honey',
      notes: 'Generic versions available'
    },
    {
      id: 17,
      name: 'Honey',
      category: 'specialty',
      priority: 'Low',
      commonStores: ['Grocery stores', 'Dollar stores'],
      estimatedPrice: '$3-7',
      description: 'Natural antimicrobial for wounds',
      alternatives: 'Medical grade honey preferred but regular honey can work in emergencies',
      notes: 'Small packets available in some restaurants/cafes'
    },
    {
      id: 18,
      name: 'Hydrogel',
      category: 'specialty',
      priority: 'Low',
      commonStores: ['Pharmacy'],
      estimatedPrice: '$6-12',
      description: 'For moistening dry wounds',
      alternatives: 'Petroleum jelly, honey',
      notes: 'Available in tubes or sheets'
    },
    
    // Alternative Options
    {
      id: 19,
      name: 'Menstrual Pads (unscented)',
      category: 'alternative',
      priority: 'Medium',
      commonStores: ['Pharmacy', 'Grocery stores', 'Dollar stores'],
      estimatedPrice: '$3-6',
      description: 'For heavily draining wounds as absorbent dressing',
      alternatives: 'Gauze pads, clean cloth',
      notes: 'Unscented, regular absorbency most versatile'
    },
    {
      id: 20,
      name: 'Clean Cotton T-shirts',
      category: 'alternative',
      priority: 'Medium',
      commonStores: ['Clothing stores', 'Thrift stores', 'Dollar stores'],
      estimatedPrice: '$1-5',
      description: 'For improvised bandages and dressings',
      alternatives: 'Any clean, soft cotton fabric',
      notes: 'White preferred, can be cut into strips and squares'
    },
    {
      id: 21,
      name: 'Tube Socks',
      category: 'alternative',
      priority: 'Low',
      commonStores: ['Clothing stores', 'Pharmacy', 'Dollar stores'],
      estimatedPrice: '$1-8',
      description: 'For securing dressings on extremities',
      alternatives: 'Self-adherent wrap, gauze',
      notes: 'Can be cut and used as sleeves'
    },
    {
      id: 22,
      name: 'Salt (for saline solution)',
      category: 'alternative',
      priority: 'Medium',
      commonStores: ['Grocery stores', 'Dollar stores', 'Convenience stores'],
      estimatedPrice: '$1',
      description: 'For making wound cleaning solution (1 tsp per quart of boiled water)',
      alternatives: 'Commercial saline solution',
      notes: 'Table salt works, non-iodized preferred'
    },
    {
      id: 23,
      name: 'Plastic Wrap',
      category: 'alternative',
      priority: 'Low',
      commonStores: ['Grocery stores', 'Dollar stores'],
      estimatedPrice: '$2-4',
      description: 'For improvised occlusive dressing with petroleum jelly',
      alternatives: 'Plastic bags (clean), wax paper',
      notes: 'Use only on wounds that need moisture'
    },
    {
      id: 24,
      name: 'Cornstarch or Baby Powder',
      category: 'alternative',
      priority: 'Low',
      commonStores: ['Grocery stores', 'Pharmacy', 'Dollar stores'],
      estimatedPrice: '$1-3',
      description: 'For keeping skin dry, preventing rashes',
      alternatives: 'Flour in emergency (not on open wounds)',
      notes: 'Unscented preferred'
    }
  ];
  
  const filteredSupplies = supplies
    .filter(item => {
      if (activeCategory !== 'all' && item.category !== activeCategory) return false;
      
      const searchTermLower = searchTerm.toLowerCase();
      return item.name.toLowerCase().includes(searchTermLower) || 
             item.description.toLowerCase().includes(searchTermLower) ||
             item.alternatives.toLowerCase().includes(searchTermLower);
    })
    .sort((a, b) => {
      // Sort by priority: High → Medium → Low
      const priorityOrder = { 'High': 1, 'Medium': 2, 'Low': 3 };
      return priorityOrder[a.priority] - priorityOrder[b.priority];
    });
  
  // For budget calculations
  const calculateBudget = () => {
    if (!budget || isNaN(parseFloat(budget))) return filteredSupplies;
    
    let remaining = parseFloat(budget);
    const result = [];
    
    // First add all High priority items
    const highPriority = filteredSupplies.filter(item => item.priority === 'High');
    for (const item of highPriority) {
      const price = parseFloat(item.estimatedPrice.replace(/\$|[-–]/g, '').split('-')[0]);
      if (remaining >= price) {
        result.push({...item, included: true});
        remaining -= price;
      } else {
        result.push({...item, included: false});
      }
    }
    
    // Then Medium priority
    const mediumPriority = filteredSupplies.filter(item => item.priority === 'Medium');
    for (const item of mediumPriority) {
      const price = parseFloat(item.estimatedPrice.replace(/\$|[-–]/g, '').split('-')[0]);
      if (remaining >= price) {
        result.push({...item, included: true});
        remaining -= price;
      } else {
        result.push({...item, included: false});
      }
    }
    
    // Finally Low priority
    const lowPriority = filteredSupplies.filter(item => item.priority === 'Low');
    for (const item of lowPriority) {
      const price = parseFloat(item.estimatedPrice.replace(/\$|[-–]/g, '').split('-')[0]);
      if (remaining >= price) {
        result.push({...item, included: true});
        remaining -= price;
      } else {
        result.push({...item, included: false});
      }
    }
    
    return result.sort((a, b) => {
      // Sort by priority and then by included status
      const priorityOrder = { 'High': 1, 'Medium': 2, 'Low': 3 };
      const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority];
      if (priorityDiff !== 0) return priorityDiff;
      
      // If same priority, included items come first
      if (a.included && !b.included) return -1;
      if (!a.included && b.included) return 1;
      return 0;
    });
  };
  
  const budgetedSupplies = budget ? calculateBudget() : filteredSupplies;
  
  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      {!showPrintView ? (
        <>
          <header className="bg-blue-800 text-white py-4 shadow-md">
            <div className="container mx-auto px-4">
              <h1 className="text-2xl font-bold">Wound Care Supplies Shopping List</h1>
              <p className="text-sm mt-1 opacity-80">Find affordable alternatives at local stores</p>
            </div>
          </header>
          
          <div className="bg-blue-700 text-white p-4">
            <div className="container mx-auto flex flex-col md:flex-row md:items-center space-y-3 md:space-y-0 md:space-x-4">
              <div className="flex-grow">
                <input
                  type="text"
                  placeholder="Search supplies..."
                  className="w-full px-4 py-2 rounded text-gray-800"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
              <div className="flex-shrink-0 w-full md:w-auto">
                <div className="flex items-center space-x-2">
                  <span className="whitespace-nowrap">Budget ($):</span>
                  <input
                    type="number"
                    placeholder="Optional"
                    className="w-full md:w-24 px-4 py-2 rounded text-gray-800"
                    value={budget}
                    onChange={(e) => setBudget(e.target.value)}
                    min="0"
                  />
                </div>
              </div>
              <div className="flex-shrink-0">
                <button 
                  className="bg-white text-blue-800 px-4 py-2 rounded hover:bg-blue-50"
                  onClick={() => setShowPrintView(true)}
                >
                  Print View
                </button>
              </div>
            </div>
          </div>
          
          <nav className="bg-white shadow">
            <div className="container mx-auto px-4 overflow-x-auto">
              <ul className="flex space-x-1 py-2">
                {categories.map(category => (
                  <li key={category.id}>
                    <button
                      className={`px-4 py-2 rounded-lg ${
                        activeCategory === category.id
                          ? 'bg-blue-100 text-blue-800 font-medium'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                      onClick={() => setActiveCategory(category.id)}
                    >
                      {category.name}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </nav>
          
          <main className="flex-grow container mx-auto px-4 py-6">
            {budgetedSupplies.length === 0 ? (
              <div className="bg-white rounded-lg shadow p-8 text-center">
                <p className="text-gray-600">No items match your search criteria.</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {budgetedSupplies.map(item => (
                  <div 
                    key={item.id} 
                    className={`bg-white rounded-lg shadow overflow-hidden ${
                      budget && !item.included ? 'opacity-50' : ''
                    }`}
                  >
                    <div className="p-4 border-b">
                      <div className="flex items-start justify-between">
                        <h3 className="text-lg font-semibold text-gray-800">{item.name}</h3>
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                          ${item.priority === 'High' ? 'bg-red-100 text-red-800' : 
                            item.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800' : 
                            'bg-green-100 text-green-800'}`}
                        >
                          {item.priority} Priority
                        </span>
                      </div>
                      <p className="mt-1 text-sm text-gray-600">{item.description}</p>
                    </div>
                    
                    <div className="px-4 py-3 bg-gray-50">
                      <div className="flex justify-between text-sm">
                        <span className="text-gray-500">Estimated Price:</span>
                        <span className="font-medium text-gray-900">{item.estimatedPrice}</span>
                      </div>
                    </div>
                    
                    <div className="px-4 py-3">
                      <h4 className="text-xs uppercase tracking-wide text-gray-500 font-semibold">Where to Find</h4>
                      <p className="mt-1 text-sm text-gray-800">{item.commonStores.join(', ')}</p>
                    </div>
                    
                    <div className="px-4 py-3 bg-blue-50">
                      <h4 className="text-xs uppercase tracking-wide text-blue-800 font-semibold">Alternative Options</h4>
                      <p className="mt-1 text-sm text-gray-800">{item.alternatives}</p>
                    </div>
                    
                    {item.notes && (
                      <div className="px-4 py-3 bg-yellow-50 border-t">
                        <p className="text-sm text-yellow-800">{item.notes}</p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </main>
        </>
      ) : (
        <PrintView 
          supplies={budgetedSupplies} 
          budget={budget} 
          onBack={() => setShowPrintView(false)} 
        />
      )}
      
      <footer className="bg-gray-800 text-white py-4 text-center text-sm">
        <div className="container mx-auto px-4">
          <p>Shopping Guide for Case Managers and People Who Use Drugs</p>
          <p className="mt-1 text-gray-400">
            This guide includes both standard and alternative options for wound care
          </p>
        </div>
      </footer>
    </div>
  );
};

const PrintView = ({ supplies, budget, onBack }) => {
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-2xl font-bold">Wound Care Shopping List</h1>
        <button 
          className="bg-blue-800 text-white px-4 py-2 rounded"
          onClick={onBack}
        >
          Back to Interactive View
        </button>
      </div>
      
      <div className="mb-4 flex justify-between items-center">
        <div>
          <p className="text-gray-600">Print this list or save as PDF to take shopping.</p>
          {budget && <p className="font-medium">Budget: ${budget}</p>}
        </div>
        <button 
          className="bg-gray-800 text-white px-4 py-2 rounded"
          onClick={() => window.print()}
        >
          Print
        </button>
      </div>
      
      <div>
        {['High', 'Medium', 'Low'].map(priority => {
          const priorityItems = supplies.filter(item => item.priority === priority);
          if (priorityItems.length === 0) return null;
          
          return (
            <div key={priority} className="mb-8">
              <h2 className={`text-xl font-bold mb-3 ${
                priority === 'High' ? 'text-red-800' : 
                priority === 'Medium' ? 'text-yellow-800' : 
                'text-green-800'
              }`}>
                {priority} Priority Items
              </h2>
              
              <div className="overflow-hidden border border-gray-200 rounded-lg">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Item
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Price
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Where to Find
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Alternatives
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {priorityItems.map(item => (
                      <tr key={item.id} className={budget && !item.included ? 'bg-gray-100 text-gray-400' : ''}>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-medium text-gray-900">{item.name}</div>
                          <div className="text-sm text-gray-500">{item.description}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">{item.estimatedPrice}</div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="text-sm text-gray-900">{item.commonStores.join(', ')}</div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="text-sm text-gray-900">{item.alternatives}</div>
                          {item.notes && (
                            <div className="text-sm text-gray-500 mt-1 italic">{item.notes}</div>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          );
        })}
      </div>
      
      <div className="mt-8 border-t pt-4">
        <h3 className="text-lg font-semibold mb-2">Notes:</h3>
        <ul className="list-disc pl-5 text-sm text-gray-700">
          <li className="mb-1">For emergency improvised options, ensure materials are as clean as possible.</li>
          <li className="mb-1">Always wash hands before handling wound care supplies.</li>
          <li className="mb-1">Replace improvised materials with proper medical supplies when possible.</li>
          <li className="mb-1">Store supplies in clean, dry containers.</li>
          <li className="mb-1">Check expiration dates on any packaged supplies.</li>
          <li className="mb-1">Seek professional medical care for serious infections or wounds that don't improve.</li>
        </ul>
      </div>
    </div>
  );
};

export default ShoppingListApp;
